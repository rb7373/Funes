package funes.model;

import datos.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Observable;
import javax.swing.JOptionPane;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : AdministradorPrincipal.java
//  @ Date : 23/05/2014
//  @ Author : 
//
//
public class AdministradorPrincipal extends Observable {

    // Aplicación del patrón de programación Singletón para la creación de un solo Administrador.
    private static AdministradorPrincipal instance = null;

    public static AdministradorPrincipal getInstance() {
        if (instance == null) {
            instance = new AdministradorPrincipal();
        }
        return instance;
    }

    private Hashtable<String, String> nicknames = new Hashtable<String, String>();

    private ArrayList<Usuario> listaUsuarios = new ArrayList<Usuario>();

    private ArrayList<PersonaDenunciada> listaPersonasFisicas = new ArrayList<PersonaDenunciada>();
    private ArrayList<EntidadDenunciada> listaEntidades = new ArrayList<EntidadDenunciada>();
    private ArrayList<String> listaCategorias = new ArrayList<String>();
    private int calificacionesTotales;

    public Hashtable<String, String> getNicknames() {
        return nicknames;
    }

    public void registrarNuevoUsuario(ArrayList<String> pDatosGenerales) {
        Usuario nuevoUsuario = new Usuario();

        nuevoUsuario.setProvincia(pDatosGenerales.get(0));// Posición 0 : Provincia
        nuevoUsuario.setCedula(pDatosGenerales.get(1));

        nuevoUsuario.setNombre(pDatosGenerales.get(2));
        nuevoUsuario.setPrimerApellido(pDatosGenerales.get(3));
        nuevoUsuario.setSegundoApellido(pDatosGenerales.get(4));
        nuevoUsuario.setGenero(pDatosGenerales.get(5));

        nuevoUsuario.setDiaNacimiento(toNumber(pDatosGenerales.get(6)));
        nuevoUsuario.setMesNacimiento(toNumber(pDatosGenerales.get(7)));
        nuevoUsuario.setAnoNacimiento(toNumber(pDatosGenerales.get(8)));
        nuevoUsuario.setEdad(toNumber(pDatosGenerales.get(9)));

        nuevoUsuario.setInstitucionLaboral(pDatosGenerales.get(10));
        nuevoUsuario.setCargo(pDatosGenerales.get(11));

        nuevoUsuario.setNickname(pDatosGenerales.get(12));
        nuevoUsuario.setContrasena(pDatosGenerales.get(13));

        String privado = pDatosGenerales.get(14);
        if (privado.equals("Privado")) {
            nuevoUsuario.setPrivado(true);
        } else {
            nuevoUsuario.setPrivado(false);
        }

        System.out.println("Legue a Administrador Principal");
        String contrasenna = pDatosGenerales.get(13);
        System.out.println("CONTRASENA ANTES DEL HASH: " + contrasenna);
        listaUsuarios.add(nuevoUsuario);
        nicknames.put(nuevoUsuario.getNickname(), nuevoUsuario.getContrasena());

    }

    /*
     Registra a una persona
     */
    public void registrarPersona(ArrayList<String> pDatosGenerales, ArrayList<String> categorias) {

        PersonaDenunciada nuevaPersonaDenunciada = new PersonaDenunciada();

        nuevaPersonaDenunciada.setProvincia(pDatosGenerales.get(0));
        nuevaPersonaDenunciada.setCedula(pDatosGenerales.get(1));

        nuevaPersonaDenunciada.setNombre(pDatosGenerales.get(2));
        nuevaPersonaDenunciada.setPrimerApellido(pDatosGenerales.get(3));
        nuevaPersonaDenunciada.setSegundoApellido(pDatosGenerales.get(4));
        nuevaPersonaDenunciada.setGenero(pDatosGenerales.get(5));

        nuevaPersonaDenunciada.setInstitucionLaboral(pDatosGenerales.get(6));
        nuevaPersonaDenunciada.setCargo(pDatosGenerales.get(7));

        // Categoria
        ArrayList<Categoria> categoriasPersona = new ArrayList<Categoria>();

        for (int i = 0; i < categorias.size(); i++) {
            Categoria categoria = new Categoria();
            categoria.setNombre(categorias.get(i));
            categoria.setTipo("Persona");
            categoriasPersona.add(categoria);
            String categTemporal = (categorias.get(i)).toUpperCase();
            listaCategorias.add(categTemporal);

            
        }
        if (categoriasPersona.isEmpty()) {
            System.out.println("Debe escoger al menos una categoria");
        }
        nuevaPersonaDenunciada.setCategorias(categoriasPersona);
        

        listaPersonasFisicas.add(nuevaPersonaDenunciada);
        quitaRepetidos(listaCategorias);
        //System.out.print(listaCategorias);
    }

    public void registrarEntidad(ArrayList<String> pDatosGenerales, ArrayList<String> categorias) {

        EntidadDenunciada nuevaEntidadDenunciada = new EntidadDenunciada();

        nuevaEntidadDenunciada.setNombre(pDatosGenerales.get(0));
        nuevaEntidadDenunciada.setCedulaJuridica(pDatosGenerales.get(1));
        nuevaEntidadDenunciada.setPais(pDatosGenerales.get(2));
        nuevaEntidadDenunciada.setProvincia(pDatosGenerales.get(3));
        nuevaEntidadDenunciada.setCanton(pDatosGenerales.get(4));
        nuevaEntidadDenunciada.setDistrito(pDatosGenerales.get(5));
        nuevaEntidadDenunciada.setBarrio(pDatosGenerales.get(6));

        ArrayList<Categoria> categoriasEntidad = new ArrayList<Categoria>();

        for (int i = 0; i < categorias.size(); i++) {
            Categoria categoria = new Categoria();
            categoria.setNombre(categorias.get(i));
            categoria.setTipo("Entidad");
            categoriasEntidad.add(categoria);
            String categTemp = (categorias.get(i).toUpperCase());
          
            listaCategorias.add(categTemp);
            
           
            
        }
        
        if (categoriasEntidad.isEmpty()) {
            System.out.println("Debe escoger al menos una categoria");
        }

        nuevaEntidadDenunciada.setCategorias(categoriasEntidad);

        
        listaEntidades.add(nuevaEntidadDenunciada);
        quitaRepetidos(listaCategorias);
        //System.out.print(listaCategorias);
    }

    public int toNumber(String numero) {
        try {
            return Integer.parseInt(numero);
        } catch (NumberFormatException e) {
            return 1;
        }
    }

    public boolean existeNickname(String nickname) {
        // Verifica si existe el nickname
        boolean existe = false;
        ArrayList<String> listaNicknames = new ArrayList<>();

        listaNicknames = (ArrayList<String>) nicknames.keys();

        for (String listaNickname : listaNicknames) {
            if (listaNickname.equals(nickname)) {
                existe = true;
                break;
            }
        }
        return existe;
    }
    
    public void quitaRepetidos(ArrayList<String> repetidos){
        HashSet hs = new HashSet();
        hs.addAll(repetidos);
        
        repetidos.clear();
        repetidos.addAll(hs);
        
        
    }

    public void registrarCategoria() {

        listaCategorias.get(calificacionesTotales);

    }

    public void borrarCalificacion(Object id) {

    }

    public void editarDatosPersonales(String nickname, String contraseña, String nombre, String apellido) {
    }

    public void ordenarAlfabeticamente() {

    }

    public void bloquear() {

    }

    public void desbloquear() {

    }

    public void setCalificacionesTotales(int _calificacion) {

    }

    public int getCalificacionesTotales() {
        return 0;
    }

    public void AdministradorPrincipal() {

    }

    public ArrayList<EntidadDenunciada> getListaEntidades() {

        return listaEntidades;
    }

    public ArrayList<String> getListaCategorias() {
        return listaCategorias;
    }

    public ArrayList<Usuario> getListaUsuarios() {
        return listaUsuarios;
    }

    public ArrayList<PersonaDenunciada> getListaPersonasFisicas() {
        return listaPersonasFisicas;
    }

}
